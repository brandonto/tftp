SYSC 3303 Group 4 Iteration 2 Test Instructions
======================

=========================

Automated unit tests in the src/tftptest/ directory can be run using JUnit. (Please see the README.txt file for instructions on how to run the unit tests)



The following tests were done manually and passed unless otherwise stated.









=========================================================================================
Iteration 2
=========================================================================================

Test Requirements

=================



Error Packet Requirements

01. Error packet code 1 (file not found) should be sent from server to client if the client sends a RRQ to the server for a non existant file

02. Error packet code 1 (file not found) should NOT be sent from client to server if the client tries to send a WRQ for a non existant file (instead, the client should be notified that the file was not found)

03. Error packet code 2 (file access violation) should be sent from server to client if the client sends a RRQ to the server for a non-readable file

04. Error packet code 2 (file access violation) should NOT be sent from client to server if the client tries to send a WRQ for a non-readable file (instead, the client should be notified that there was a file access violation)

05. Error packet code 2 (file access violation) should be sent from server to client if the client sends a WRQ to the server for a file that exists on the server and is non-writable

06. Error packet code 2 (file access violation) should NOT sent from client to server if the client sends a RRQ to the server for a file that exists on the client and is non-writable (instead, the client should be notified that the file already exists since we do not allow clients to overwrite their own files)

07. Error packet code 3 (disk full) should be sent from the server to client if the client sends a WRQ to the server and the server's filesystem becomes full in the process of sending the file

08. Error packet code 3 (disk full) should be sent from the client to server if the clientsends a RRQ to the server and the client's filesystem becomes full in the process of sending the file









Test Plan

=========




Error Packet Test Plan:



ErrorPacket01.

1. From the Client, send a RRQ to the Server for a file that does not exist on the Server
2. Verify that error packet code 1 (file not found) is received and the connection is terminated

ErrorPacket02.

1. From the Client, send a WRQ to the Server for a file that does not exist on the Client
2. Verify that NO packet is sent, and the client is notified that the file is not found

ErrorPacket03.
1. From the Client, send a RRQ to the Server for a file that is non-readable (on the server)
2. Verify that error packet code 2 (file access violation) is received and the connection is terminated

ErrorPacket04.
1. From the Client, send a WRQ to the Server for a file that is non-readable (on the client)
2. Verify that error packet code 2 (file access violation) is received and the connection is terminated

ErrorPacket05.
1. From the Client, send a WRQ to the server for a file that that exists and is non-writable (on the Server)
2. Verify that error packet code 2 (file access violation) is received and the connection is terminated

ErrorPacket06.
1. From the Client, send a RRQ to the server for a file that that exists and is non-writable (on the Client)
2. Verify that NO packet is sent, and the client is notified that the file exists (since we do not allow overwrite on the Client)

ErrorPacket07.
1. From the Client, send a WRQ to the server for a file that would be larger than the amount of space left on the Server's file system
2. Verify that the transfer progresses as expected until the space is filled up
3. Verify that error packet code 3 (disk full) is received and the connection is terminated
4. Verify that the no "half written" file is left on the Server's file system


ErrorPacket08.
1. From the Client, send a RRQ to the server for a file that would be larger than the amount of space left on the Client's file system
2. Verify that the transfer progresses as expected until the space is filled up
3. Verify that error packet code 3 (disk full) is sent to the Server and the connection is terminated
4. Verify that the no "half written" file is left on the Client's file system




=========================================================================================
Iteration 1
=========================================================================================

Test Requirements

=================



Client Requirements



01. Client should successfully write any file to Server


02. Client should successfully read any file from Server


03. Client should successfully write empty file to Server


04. Client should successfully read empty file from Server


05. Client should successfully write a file that has size that is a multiple of 512 bytes to the Server


06. Client should successfully read a file that has size that is a multiple of 512 bytes from the Server


07. Client should successfully write a file that is larger than 33553920 bytes (65535 blocks * 512 bytes/block) to the Server


08. Client should successfully read a file that is larger than 33553920 bytes (65535 blocks * 512 bytes/block) from the Server


09. Client should successfully write files of different file extentions to the Server


10. Client should successfully read files of different file extentions to the Server


11. Client should only support one file transfer at a time


12. Client should support a command to exit gracefully



-----------------------------------------------------------------------------------------


Server Requirements (some requirements are handled in previous listings)



01. Server should support multiple concurrent file transfers from different Clients


02. Server should overwrite files if one with the same name already exists


03. Server should support a command to exit gracefully


04. Server should finish all running file transfers before exiting


05. Server should ignore any new requests following an exit command










Test Plan

=========




Client Test Plan:



Client01.

1. From the Client, send a write request to the Server for "small.txt"

2. Verify that Server successfully receives "small.txt"



Client02.

1. From the Client, send a read request to the Server for "small.txt"

2. Verify that Client successfully receives "small.txt"



Client03.

1. From the Client, send a write request to the Server for "empty.txt"

2. Verify that Server successfully receives "empty.txt"



Client04.

1. From the Client, send a read request to the Server for "empty.txt"

2. Verify that Client successfully receives "empty.txt"



Client05.

1. From the Client, send a write request to the Server for "512exact.txt"

2. Verify that Server successfully receives "512exact.txt"

3. From the Client, send a write request to the Server for "1024exact.txt"

4. Verify that Server successfully receives "1024exact.txt"



Client06.

1. From the Client, send a read request to the Server for "512exact.txt"

2. Verify that Client successfully receives "512exact.txt"

3. From the Client, send a read request to the Server for "1024exact.txt"

4. Verify that Server successfully receives "1024exact.txt"



Client07.

1. From the Client, send a write request to the Server for "toolarge.txt"

2. Verify that Server successfully receives "toolarge.txt"

3. Verify that the block number "wraps around" back to 0 after it goes past 65535



Client08.

1. From the Client, send a read request to the Server for "toolarge.txt"

2. Verify that Client successfully receives "toolarge.txt"

3. Verify that the block number "wraps around" back to 0 after it goes past 65535



Client09.

1. From the Client, send a write request to the Server for "menu.png"

2. Verify that Server successfully receives "menu.png"

Client10.

1. From the Client, send a read request to the Server for "menu.png"

2. Verify that Client successfully receives "menu.png"



Client11.

1. From the Client, send a write request to the Server for "large.txt"

2. From the Client, while "large.txt" is being sent, try to send another file

3. Verify that no other file can be sent

4. Verify that Server successfully receives "large.txt"



Client12.

1. From the Client, verify that there are no current transfers are in progress

2. Input the exit command
3. Verify that the Client successfully exits


-----------------------------------------------------------------------------------------




Server Test Plan:



Server01.
1. From the Client, send a write request to the Server for "large.txt"

2. From a different Client (must use a different port), while "large.txt" is being sent, send a write request to the Server for "small.txt"

3. Verify that Server successfully receives "small.txt"

4. Verify that Server successfully receives "large.txt"



Server02.

1. From the Client, send a write request to the Server for "small.txt"

2. Verify that Server successfully receives "small.txt"

3. Append "success!" to the end of the "small.txt" file

4. From the Client, send a write request to the Server for "small.txt"

5. Verify that Server successfully receives "small.txt"

6. Verify that the "small.txt" on the server now has "success!" appended to file



Server03 && Server04 && Server05.

1. From the Client, send a write request to the Server for "large.txt"

2. From the Server, while "large.txt" is being sent, input the exit command

3. From a different Client (must use a different port), while "large.txt" is being sent, send a write request to the Server for "small.txt"

4. Verify that the Server does NOT receive "small.txt" (Since the server should reject file transfers after exit command)(Client should hang because it is waiting for an ack)

5. Verify that the Server successfully receives "large.txt"

6. Verify that the Server successfully exits after "large.txt" is finished being sent


